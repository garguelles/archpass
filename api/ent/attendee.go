// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/garguelles/archpass/ent/attendee"
	"github.com/garguelles/archpass/ent/event"
	"github.com/garguelles/archpass/ent/user"
)

// Attendee is the model entity for the Attendee schema.
type Attendee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id,omitempty"`
	// TicketID holds the value of the "ticket_id" field.
	TicketID int `json:"ticket_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendeeQuery when eager-loading is set.
	Edges        AttendeeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AttendeeEdges holds the relations/edges for other nodes in the graph.
type AttendeeEdges struct {
	// Events holds the value of the events edge.
	Events *Event `json:"events,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendeeEdges) EventsOrErr() (*Event, error) {
	if e.Events != nil {
		return e.Events, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "events"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendeeEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendee.FieldID, attendee.FieldUserID, attendee.FieldEventID, attendee.FieldTicketID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendee fields.
func (a *Attendee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case attendee.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = int(value.Int64)
			}
		case attendee.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				a.EventID = int(value.Int64)
			}
		case attendee.FieldTicketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_id", values[i])
			} else if value.Valid {
				a.TicketID = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attendee.
// This includes values selected through modifiers, order, etc.
func (a *Attendee) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryEvents queries the "events" edge of the Attendee entity.
func (a *Attendee) QueryEvents() *EventQuery {
	return NewAttendeeClient(a.config).QueryEvents(a)
}

// QueryUsers queries the "users" edge of the Attendee entity.
func (a *Attendee) QueryUsers() *UserQuery {
	return NewAttendeeClient(a.config).QueryUsers(a)
}

// Update returns a builder for updating this Attendee.
// Note that you need to call Attendee.Unwrap() before calling this method if this Attendee
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendee) Update() *AttendeeUpdateOne {
	return NewAttendeeClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Attendee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendee) Unwrap() *Attendee {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attendee is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendee) String() string {
	var builder strings.Builder
	builder.WriteString("Attendee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", a.EventID))
	builder.WriteString(", ")
	builder.WriteString("ticket_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TicketID))
	builder.WriteByte(')')
	return builder.String()
}

// Attendees is a parsable slice of Attendee.
type Attendees []*Attendee
